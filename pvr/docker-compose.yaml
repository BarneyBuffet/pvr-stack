## https://www.youtube.com/watch?v=5rtGBwBuzQE
version: '3'

services:
  ## https://haugene.github.io/docker-transmission-openvpn/
  transmission-openvpn:
    ## https://github.com/haugene/docker-transmission-openvpn/releases
    image: haugene/transmission-openvpn:${TRANSMISSION_VERSION:-latest}
    container_name: pvr_transmission
    volumes:
      - ${DOWNLOADS_PATH}:/data/downloads:z
      - ${PVR_PATH}/transmission:/data/transmission-home:Z
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - CREATE_TUN_DEVICE=true
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 --dhcp-option DNS 9.9.9.9
      - WEBPROXY_ENABLED=false
      - LOCAL_NETWORK=${TRANSMISSION_LOCAL_NETWORK}
      - TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=false
      - TRANSMISSION_HOME=/data/transmission-home
      - TRANSMISSION_DOWNLOAD_DIR=/data/downloads
      - TRANSMISSION_INCOMPLETE_DIR=/data/downloads/#incomplete
      - TRANSMISSION_WATCH_DIR=/data/downloads/#watch
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_RPC_USERNAME}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_RPC_PASSWORD}
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=4
      - TRANSMISSION_WEB_UI=transmission-web-control
      - TRANSMISSION_ALT_SPEED_DOWN=1000
      - TRANSMISSION_ALT_SPEED_ENABLED=true
      - TRANSMISSION_ALT_SPEED_TIME_BEGIN=300
      - TRANSMISSION_ALT_SPEED_TIME_DAY=127
      - TRANSMISSION_ALT_SPEED_TIME_ENABLED=true
      - TRANSMISSION_ALT_SPEED_TIME_END=1380
      - TRANSMISSION_ALT_SPEED_UP=2
      - TRANSMISSION_PEER_PORT=47444
      - DNS=9.9.9.9,149.112.112.112
    cap_add:
      - NET_ADMIN
    logging:
      driver: json-file
      options:
        max-size: 10m
    ports:
      - ${TRANSMISSION_GUI_PORT:-9091}:9091 ## Transmission WebGUI
      - ${TDARR_GUI_PORT:-8265}:8265 ## Tdarr WebGUI
      - ${TDARR_SERVER_PORT:-8266}:8266 ## Tdarr server port
      - ${TDARR_NODE_PORT:-8267}:8267 ## Tdarr internal node port
      - ${TDARR_EXTRA_NODE_PORT:-8268}:8268 ## Tdarr extra node port
      - ${PROWLARR_GUI_PORT:-9696}:9696 ## Prowlarr WebGUI
      - ${RADARR_GUI_PORT:-7878}:7878 ## Radarr WebGUI
      - ${SONARR_GUI_PORT:-8989}:8989 ## Sonarr WebGUI
      - ${LIDARR_GUI_PORT:-8686}:8686 ## Lidarr WebGUI
      - ${READARR_GUI_PORT:-8787}:8787 ## Readarr WebGUI
      - ${LIBRARIAN_GUI_PORT:-5299}:5299 ## Lazylibrarian WebGUI
      - ${CALIBRE_DESKTOP_PORT:-8080}:8080 ## calibre
      - ${CALIBRE_GUI_PORT:-8081}:8081 ## calibre
      - ${CALIBRE_WEB_GUI_PORT:-8083}:8083 ## calibre-web
      - ${JELLYFIN_PORT:-8096}:8096 ## Jellyfin http WebGUI
      - ${JELLYFIN_GUI_PORT:-8920}:8920 ## Optional Jellyfin https WebGUI
      # - ${JELLYFIN_DISCO_PORT:-7359}:7359/udp ## Optional Jellyfin discoverable
      # - ${JELLYFIN_DLNA_PORT:-1900}:1900/udp ## Optional Jellyfin DNLA
    restart: unless-stopped

  tdarr:
    ## https://github.com/users/haveagitgat/packages/container/package/tdarr 
    image: ghcr.io/haveagitgat/tdarr:${TDARR_VERSION:-latest}
    container_name: pvr_tdarr
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
    # ports: ## Not needed because we are going through service:transmission-openvpn 
      # - 8265:8265 # webUI port
      # - 8266:8266 # server port
      # - 8267:8267 # Internal node port
      # - 8268:8268 # Example extra node port
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK}
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      ## Not using distributed notes, so not needed
      # - nodeID=MyInternalNode
      # - nodeIP=0.0.0.0
      # - nodePort=8267
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/tdarr/server:/app/server:Z
      - ${PVR_PATH}/tdarr/configs:/app/configs:Z
      - ${PVR_PATH}/tdarr/logs:/app/logs:Z
      - ${PVR_PATH}/tdarr/media:/media:Z
      - ${PVR_PATH}/tdarr/transcode_cache:/temp:Z
      - ${MOVIES_PATH}:/home/Tdarr/Media/Movies:z
      - ${TV_PATH}:/home/Tdarr/Media/TVShows:z
      - ${BJJ_PATH}:/home/Tdarr/Media/BJJ:z
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:8265 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s

  prowlarr:
    ## https://github.com/linuxserver/docker-prowlarr/releases
    image: lscr.io/linuxserver/prowlarr:${PROWLARR_VERSION:-develop}
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
    container_name: pvr_prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/prowlarr:/config:Z
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:9696 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s
 
  radarr:
    ## https://github.com/linuxserver/docker-radarr/releases
    image: lscr.io/linuxserver/radarr:${RADARR_VERSION:-latest}
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
      - prowlarr
    container_name: pvr_radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/radarr:/config:Z
      - ${MOVIES_PATH}:/movies:z
      - ${DOWNLOADS_PATH}:/downloads:z
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:7878 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s
 
  sonarr:
    ## https://github.com/linuxserver/docker-sonarr/releases 
    image: lscr.io/linuxserver/sonarr:${SONARR_VERSION:-latest}
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
      - prowlarr
    container_name: pvr_sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/sonarr:/config:Z
      - ${TV_PATH}:/tv:z
      - ${DOWNLOADS_PATH}:/downloads:z
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:8989 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s
 
  lidarr:
    ## https://github.com/linuxserver/docker-lidarr/releases
    image: lscr.io/linuxserver/lidarr:${LIDARR_VERSION:-latest}
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
      - prowlarr
    container_name: pvr_lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - DOCKER_MODS=lscr.io/linuxserver/mods:lidarr-flac2mp3 #optional
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/lidarr:/config:Z
      - ${MUSIC_PATH}:/music:z
      - ${DOWNLOADS_PATH}:/downloads:z
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:8686 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s

  jellyfin:
    ## https://github.com/linuxserver/docker-jellyfin/releases
    image: lscr.io/linuxserver/jellyfin:${JELLYFIN_VERSION:-latest}
    container_name: pvr_jellyfin
    network_mode: "service:transmission-openvpn"
    depends_on:
      - transmission-openvpn # for vpn internet access
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - DOCKER_MODS=lscr.io/linuxserver/mods:jellyfin-opencl-intel #optional
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PVR_PATH}/jellyfin:/config:Z
      - ${AUDIOBOOKS_PATH}:/data/audiobooks:z
      - ${MOVIES_PATH}:/data/movies:z
      - ${TV_PATH}:/data/tv:z
      - ${MUSIC_PATH}:/data/music:z
      - ${BJJ_PATH}:/data/bjj:z
    # Ports go through transmission vpn container
    # ports:
    #   - 8096:8096
    #   - 8920:8920 #optional
    #   - 7359:7359/udp #optional
    #   - 1900:1900/udp #optional
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:8096 || exit 1
    #   interval: 60s
    #   retries: 5
    #   start_period: 60s
    #   timeout: 10s

  # lazylibrarian:
  #   # https://github.com/linuxserver/docker-lazylibrarian/releases
  #   image: lscr.io/linuxserver/lazylibrarian:${LAZYLIBRIAN_VERSION:-latest}
  #   container_name: pvr_lazylibrarian
  #   network_mode: "service:transmission-openvpn"
  #   depends_on:
  #     - pvr_transmission  # for vpn internet access
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - UMASK=${UMASK}
  #     - DOCKER_MODS=lscr.io/linuxserver/calibre-web:calibre|lscr.io/linuxserver/mods:lazylibrarian-ffmpeg #optional
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${PVR_PATH}/lazylibrarian:/config:Z
  #     - ${BOOKS_PATH}:/books:z
  #     - ${AUDIOBOOKS_PATH}:/audiobooks:z
  #     - ${DOWNLOADS_PATH}:/downloads:z
  #   # Ports go through transmission vpn container
  #   # ports:
  #   #   - 5299:5299
  #   restart: unless-stopped
  #   healthcheck:
  #     test: curl --fail http://localhost:5299 || exit 1
  #     interval: 60s
  #     retries: 5
  #     start_period: 60s
  #     timeout: 10s

  # plex:
  #     image: linuxserver/plex
  #     network_mode: "service:transmission-openvpn"
  #     container_name: plex
  #     volumes:
  #         - /media/${USER}/Data/appdata/plex:/config
  #         - /media/${USER}/Data/media/tv:/tv
  #         - /media/${USER}/Data/media/movies:/movies
  #         - /media/${USER}/Data/media/music:/music
  #     env_file:
  #         - stack.env
  #     restart: unless-stopped    

# calibre:
  #   # https://github.com/linuxserver/docker-calibre/releases
  #   image: lscr.io/linuxserver/calibre:${CALIBRE_VERSION:-latest}
  #   container_name: pvr_calibre
  #   network_mode: "service:transmission-openvpn"
  #   depends_on:
  #     - pvr_transmission  # for vpn internet access
  #   restart: unless-stopped
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - UMASK=${UMASK}
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${PVR_PATH}/calibre:/config:Z
  #     - ${AUDIOBOOKS_PATH}:/audiobooks:z
  #     - ${BOOKS_PATH}:/ebooks:z
  #   # Ports go through transmission vpn container
  #   # ports:
  #     # - 8080:8080
  #     # - 8084:8081
  #   healthcheck:
  #     test: curl --fail http://localhost:8080 || exit 1
  #     interval: 60s
  #     retries: 5
  #     start_period: 60s
  #     timeout: 10s

  # # https://github.com/linuxserver/docker-calibre-web
  # calibre-web:
  #   # https://github.com/linuxserver/docker-calibre-web/releases
  #   image: lscr.io/linuxserver/calibre-web:${CALIBRE_WEB_VERSION:-latest}
  #   container_name: pvr_calibre_web
  #   network_mode: "service:transmission-openvpn"
  #   depends_on:
  #     - pvr_transmission  # for vpn internet access
  #   restart: unless-stopped
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - UMASK=${UMASK}
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${PVR_PATH}/calibre_web:/config:Z
  #     - ${AUDIOBOOKS_PATH}:/audiobooks:z
  #     - ${BOOKS_PATH}:/ebooks:z
  #   # Ports go through transmission vpn container
  #   # ports:
  #   #   - 8084:8080
  #   healthcheck:
  #     test: curl --fail http://localhost:8083 || exit 1
  #     interval: 60s
  #     retries: 5
  #     start_period: 60s
  #     timeout: 10s

  # readarr:
  #   ## https://github.com/linuxserver/docker-readarr/releases
  #   image: lscr.io/linuxserver/readarr:${READARR_VERSION:-develop}
  #   network_mode: "service:transmission-openvpn"
  #   container_name: pvr_readarr
  #   depends_on:
  #     - pvr_transmission  # for vpn internet access
  #     - pvr_prowlarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - UMASK=${UMASK}
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ${PVR_PATH}/readarr:/config:Z
  #     - ${BOOKS_PATH}:/books:z
  #     - ${AUDIOBOOKS_PATH}:/audiobooks:z
  #     - ${DOWNLOADS_PATH}:/downloads:z
  #   # Ports go through transmission vpn container
  #   # ports:
  #   #   - 8787:8787
  #   restart: unless-stopped
  #   healthcheck:
  #     test: curl --fail http://localhost:8787 || exit 1
  #     interval: 60s
  #     retries: 5
  #     start_period: 60s
  #     timeout: 10s